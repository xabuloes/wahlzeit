/*
 * CartesianCoordinate
 * 
 * Copyright (c) 2017 by xabuloes, http://github.com/xabuloes
 *
 * This file is part of the Wahlzeit photo rating application.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 */

package org.wahlzeit.model;

import java.util.HashMap;

import org.wahlzeit.utils.CustomAssertionUtils;

/**
 * A coordinate represented by the Cartesian system with values x, y and z.
 */
public final class CartesianCoordinate extends AbstractCoordinate {

	/**
	 * 
	 */
	private static final HashMap<String, CartesianCoordinate> sharedCartesianCoordinates = new HashMap<String, CartesianCoordinate>();

	/**
	 * Requests a shared CartesianCoordinate instance.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @return
	 */
	public static final CartesianCoordinate get(double x, double y, double z) {

		final String coordinateAsString = asCoordinateString(x, y, z);

		if (sharedCartesianCoordinates.get(coordinateAsString) == null) {
			synchronized (CartesianCoordinate.class) {
				if (sharedCartesianCoordinates.get(coordinateAsString) == null) {

					sharedCartesianCoordinates.put(coordinateAsString, new CartesianCoordinate(x, y, z));
				}
				return sharedCartesianCoordinates.get(coordinateAsString);
			}
		} else {
			return sharedCartesianCoordinates.get(coordinateAsString);
		}

	}

	/**
	 * Creates a string of Cartesian coordinate values for distinct identification
	 * of a coordinate value.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @return
	 */
	private static final String asCoordinateString(double x, double y, double z) {
		return x + ";" + y + ";" + z;
	}

	// TODO: Reintroduce setters & return new value objects

	private final double x;

	private final double y;

	private final double z;

	/**
	 * Create a new instance with values x, y and z.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 */
	private CartesianCoordinate(double x, double y, double z) {
		super();

		this.x = x;
		this.y = y;
		this.z = z;

		this.assertClassInvariants();
	}

	/**
	 * Get x value.
	 * 
	 * @return X value of coordinate.
	 */
	public double getX() {
		// No assertions, since this is only a getter
		return x;
	}

	/**
	 * Return value object representing the coordinate with the new x value.
	 * 
	 * @param x
	 *            New X value of coordinate.
	 */
	public CartesianCoordinate setX(double x) {
		CustomAssertionUtils.assertDoubleIsFiniteNumber(x);

		CartesianCoordinate newCoordinate = CartesianCoordinate.get(x, this.getY(), this.getZ());

		// No class invariant assertion, since we are in an immutable shared value
		// object.

		return newCoordinate;
	}

	/**
	 * Get y value.
	 * 
	 * @return Y value of coordinate.
	 */
	public double getY() {
		// No assertions, since this is only a getter
		return y;
	}

	/**
	 * Return value object representing the coordinate with the new y value.
	 * 
	 * @param y
	 *            New Y value of coordinate.
	 */
	public CartesianCoordinate setY(double y) {
		CustomAssertionUtils.assertDoubleIsFiniteNumber(y);

		CartesianCoordinate newCoordinate = CartesianCoordinate.get(this.getX(), y, this.getZ());

		// No class invariant assertion, since we are in an immutable shared value
		// object.

		return newCoordinate;
	}

	/**
	 * Get z value.
	 * 
	 * @return Z value of coordinate.
	 */
	public double getZ() {
		// No assertions, since this is only a getter
		return z;
	}

	/**
	 * Return value object representing the coordinate with the new z value.
	 * 
	 * @param z
	 *            New Z value of coordinate.
	 */
	public CartesianCoordinate setZ(double z) {
		CustomAssertionUtils.assertDoubleIsFiniteNumber(z);

		CartesianCoordinate newCoordinate = CartesianCoordinate.get(this.getX(), this.getY(), z);

		// No class invariant assertion, since we are in an immutable shared value
		// object.

		return newCoordinate;
	}

	/**
	 * This method is auto-generated by Eclipse. hashCode() has to be implemented
	 * when equals is overridden.
	 * 
	 * @return hashCode
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(z);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public CartesianCoordinate asCartesianCoordinate() {
		// No assertions, since this is only a getter
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	public SphericCoordinate asSphericCoordinate() {

		final double latitude = Math
				.atan(Math.sqrt(this.getX() * this.getX() + this.getY() * this.getY()) / this.getZ());
		final double longitude = Math.atan(this.getY() / this.getX());
		final double radius = Math
				.sqrt(this.getX() * this.getX() + this.getY() * this.getY() + this.getZ() * this.getZ());

		final SphericCoordinate sphericCoordinate = SphericCoordinate.get(latitude, longitude, radius);

		this.assertClassInvariants();

		return sphericCoordinate;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public double doGetCartesianDistance(Coordinate coordinateB) {

		CustomAssertionUtils.assertValueIsNotNull(coordinateB);

		CartesianCoordinate asCartesianCoordinate = coordinateB.asCartesianCoordinate();

		final double dx = Math.abs(this.getX() - asCartesianCoordinate.getX());
		final double dy = Math.abs(this.getY() - asCartesianCoordinate.getY());
		final double dz = Math.abs(this.getZ() - asCartesianCoordinate.getZ());

		final double cartesianDistance = Math.sqrt(dx * dx + dy * dy + dz * dz);

		CustomAssertionUtils.assertDoubleValueIsGreaterOrEqualThanZero(cartesianDistance);
		this.assertClassInvariants();

		return cartesianDistance;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public double doGetSphericDistance(Coordinate coordinateB) {

		CustomAssertionUtils.assertValueIsNotNull(coordinateB);

		final double sphericDistance = this.asSphericCoordinate().getSphericDistance(coordinateB);

		CustomAssertionUtils.assertDoubleValueIsGreaterOrEqualThanZero(sphericDistance);
		this.assertClassInvariants();

		return sphericDistance;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected double doGetDistance(Coordinate coordinateB) {

		CustomAssertionUtils.assertValueIsNotNull(coordinateB);

		final double distance = this.doGetCartesianDistance(coordinateB);

		this.assertClassInvariants();

		return distance;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected void assertClassInvariants() {

		CustomAssertionUtils.assertDoubleIsFiniteNumber(this.x);
		CustomAssertionUtils.assertDoubleIsFiniteNumber(this.y);
		CustomAssertionUtils.assertDoubleIsFiniteNumber(this.z);

		super.assertClassInvariants();
	}

}
