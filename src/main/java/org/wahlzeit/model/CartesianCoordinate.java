/*
 * CartesianCoordinate
 * 
 * Copyright (c) 2017 by xabuloes, http://github.com/xabuloes
 *
 * This file is part of the Wahlzeit photo rating application.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 */

package org.wahlzeit.model;

/**
 * A coordinate represented by the Cartesian system with values x, y and z.
 */
public class CartesianCoordinate extends AbstractCoordinate {

	private double x;

	private double y;

	private double z;

	/**
	 * Create a new instance with values x, y and z.
	 * 
	 * @param x
	 * @param y
	 * @param z
	 */
	public CartesianCoordinate(double x, double y, double z) {
		super();

		this.setX(x);
		this.setY(y);
		this.setZ(z);
	}

	/**
	 * Get x value.
	 * 
	 * @return X value of coordinate.
	 */
	public double getX() {
		// No assertions, since this is only a getter
		return x;
	}

	/**
	 * Set x value.
	 * 
	 * @param x
	 *            New X value of coordinate.
	 */
	public void setX(double x) {
		this.assertDoubleIsFiniteNumber(x);
		
		this.x = x;
		
		this.assertClassInvariants();
	}

	/**
	 * Get y value.
	 * 
	 * @return Y value of coordinate.
	 */
	public double getY() {
		// No assertions, since this is only a getter
		return y;
	}

	/**
	 * Set y value.
	 * 
	 * @param y
	 *            New Y value of coordinate.
	 */
	public void setY(double y) {
		this.assertDoubleIsFiniteNumber(y);
		
		this.y = y;
		
		this.assertClassInvariants();
	}

	/**
	 * Get z value.
	 * 
	 * @return Z value of coordinate.
	 */
	public double getZ() {
		// No assertions, since this is only a getter
		return z;
	}

	/**
	 * Set z value.
	 * 
	 * @param z
	 *            New Z value of coordinate.
	 */
	public void setZ(double z) {
		this.assertDoubleIsFiniteNumber(z);
		
		this.z = z;
		
		this.assertClassInvariants();
	}

	/**
	 * This method is auto-generated by Eclipse. hashCode() has to be implemented
	 * when equals is overridden.
	 * 
	 * @return hashCode
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(z);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public CartesianCoordinate asCartesianCoordinate() {
		// No assertions, since this is only a getter
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	public SphericCoordinate asSphericCoordinate() {
		this.assertClassInvariants();
		
		final double latitude = Math.atan(Math.sqrt(this.getX() * this.getX() + this.getY() * this.getY()) / this.getZ());
		final double longitude = Math.atan(this.getY() / this.getX());
		final double radius = Math.sqrt(this.getX() * this.getX() + this.getY() * this.getY() + this.getZ() * this.getZ());

		final SphericCoordinate sphericCoordinate = new SphericCoordinate(latitude, longitude, radius);
		
		this.assertClassInvariants();
		
		return sphericCoordinate;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public double doGetCartesianDistance(Coordinate coordinateB) {
		
		this.assertValueIsNotNull(coordinateB);

		CartesianCoordinate asCartesianCoordinate = coordinateB.asCartesianCoordinate();

		final double dx = Math.abs(this.getX() - asCartesianCoordinate.getX());
		final double dy = Math.abs(this.getY() - asCartesianCoordinate.getY());
		final double dz = Math.abs(this.getZ() - asCartesianCoordinate.getZ());

		final double cartesianDistance = Math.sqrt(dx * dx + dy * dy + dz * dz);
		
		this.assertDoubleValueIsGreaterOrEqualThanZero(cartesianDistance);
		this.assertClassInvariants();
		
		return cartesianDistance;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public double doGetSphericDistance(Coordinate coordinateB) {
		
		this.assertValueIsNotNull(coordinateB);
		
		final double sphericDistance = this.asSphericCoordinate().getSphericDistance(coordinateB);
		
		this.assertDoubleValueIsGreaterOrEqualThanZero(sphericDistance);
		this.assertClassInvariants();
		
		return sphericDistance;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected double doGetDistance(Coordinate coordinateB) {
		
		this.assertValueIsNotNull(coordinateB);
		
		final double distance = this.doGetCartesianDistance(coordinateB);
		
		this.assertClassInvariants();
		
		return distance;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	protected void assertClassInvariants() {
		
		this.assertDoubleIsFiniteNumber(this.x);
		this.assertDoubleIsFiniteNumber(this.y);
		this.assertDoubleIsFiniteNumber(this.z);
		
		super.assertClassInvariants();
	}

}
